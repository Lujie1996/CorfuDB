syntax = "proto3";

package org.corfudb.runtime;
option java_package = "org.corfudb.runtime";
option java_outer_classname = "KvStore";

import "google/protobuf/any.proto";
import "google/protobuf/descriptor.proto";


//------------ Schema -------------------//
// ProtoBuf message description. This metadata is used to understand
// the structure of the serialized message.
message MessageSchema {
    google.protobuf.DescriptorProto metaInfo = 1;
}

// Primary key by which a record is retrieved.
// This is required as we do not wish the Corfu layer to understand
// the schema of the serialized payload.
// The key lookup is done using a hash function and does not support more
// complex indexing schemes (such as range).
message Key {
    MessageSchema schema = 1;
    google.protobuf.Any payload = 2;
}

// The actual data that is stored by the business logic.
message Value {
    MessageSchema schema = 1;
    google.protobuf.Any payload = 2;
}

// A version that is tied the record structure, signaling the total number of
// modification that had been done.
message Version {
    int64 ver = 1;
}

// Persisted meta-data associated with the record. This is not meant to be used
// by the application writers, but instead by frameworks that require cross-cutting
// functionality.
message Context {
    map<string, google.protobuf.Any> contextType = 1;
}

// Ties all underlying concepts such as Key, Value, Version and Context into one object.
message Record {
    Key key = 1;
    Value value = 2;
    Version version = 3;
    Context context = 4;
}

//------------ information schema -------------------//
//TODO: Do we want to tie Namespace to a different lifecycle?
//[code]
// create db(spec);
// create table(spec);
//[code]
// Contains all necessary information for describing a table.
message Table {
    Namespace namespace = 1;
    string name = 2;
}


// A grouping concept that allows for resource isolation.
// For example, the same table name can exist within several different namespaces.
message Namespace {
    string name = 1;
}
//------------ configuration -------------------//

// A meta-information which defines a Corfu Table
message TableSchema {
    Table table = 1;
    MessageSchema keySchema = 2;
    MessageSchema valueSchema = 3;

    Index index = 4;
}

// Defines an exact match secondary index on the specified list of fields.
message Index {
    repeated google.protobuf.Any fields = 1;
}

//------------ crud -------------------//
// We are following CQRS pattern https://martinfowler.com/bliki/CQRS.html

// A command which changes a database state.
message Command {
    CommandType commandType = 1;
    Table table = 2;
    Record record = 3;
    OperationalCtx ctx = 4;

    enum CommandType {
        CREATE = 0;
        UPDATE = 1;
        DELETE = 2;
    }
}

// Get the record associated with the provided key.
// User defined snapshot is used if an appropriate OperationalCtx is provided.
message GetQuery {
    Table table = 1;
    Key key = 2;
    OperationalCtx context = 3;
}

// Every CRUD operation returns an ActionResult, which contains the Table on which
// the operation was performed and the resulting Record.
message ActionResult {
    Table table = 1;
    Record result = 2;
}

//------------ context -------------------//
// The purpose of a context is to allow an object or a function to alter its behavior
// depending on the context in which it is operating.
message OperationalCtx {
    IsolationCtx isolationCtx = 1;
    ExecutionCtx executionCtx = 2;
}

// A context that defines different isolation guarantees. The client is free to choose
// how the API should behave, depending on the underlying implementation.
message IsolationCtx {
    int64 epoch = 1;
    int64 sequenceNumber = 2;
}

// A context that defines different execution mechanisms.
message ExecutionCtx {
    bool async = 1;
}


//------------ transaction -------------------//
// Defines a set of mutation operations that are executed atomically.
message TransactionBuilder {
    repeated TxBuilderOperation operation = 2;
}


// A union describing all possible mutations.
message TxBuilderOperation {
    Command command = 1;
}
